{"version":3,"sources":["events/MousePositionEvent.ts","events/MovementUpdateEvent.ts","controllers/MovementController.ts","events/PlayerInitEvent.ts","view/PlayerBall.ts","controllers/PlayerController.ts","game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MousePositionEvent","_GameEvent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","player","_ref","_ref$mousePosition","mousePosition","mouseX","x","mouseY","y","_player$mousePosition","mousePosition.x","mousePosition.y","length","undefined","concat","params","uuid","GameEvent","MovementUpdateEvent","_getPrototypeOf2","_this","_len","args","Array","_key","call","type","GameEventType","Local","players","_this2","assign","toConsumableArray","keys","map","id","createChanges","_","_player$playerPositio","playerPosition","diffX","diffY","total","Math","abs","percX","percY","prevVector","vector","defineProperty","MovementController","_GameController","current","previous","countdown","window","addEventListener","clientX","clientY","delta","events","trigger","INTERVAL","GameController","PlayerInitEvent","state","color","PlayerBall","_ViewItem","gameState","viewState","ctx","beginPath","arc","PI","fillStyle","fill","vPlayer","prevPercentage","prevPlayerPosition","percentage","min","gameManager","ticksPerSecond","newX","newY","objectSpread","ViewItem","PlayerController","forEach","createPlayerBall","on$","subscribe","event","randomColor","party","view","registerViewItem","game","GameEngine","initialViewState","framesPerSecond","initialState","canvasWidth","canvasHeight","controllers","socketConfig","host","rtcConfig","iceServers","urls","gameEngine","start","ReactiveXComponent","react_default","a","createElement","className","ref","node","appendChild","viewElement","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29586284.chunk.js","sourcesContent":["import { GameEvent, GameEventType, ModificationMap, Vector } from '@kevupton/game-engine';\nimport { GameState } from '../game';\n\ninterface MouseData {\n  mousePosition : Vector;\n  uuid : string;\n}\n\nexport class MousePositionEvent extends GameEvent<GameState['players']['uuid'], MouseData> {\n\n  protected calculateModifications (\n    player : GameState['players']['uuid'],\n    { mousePosition: { x: mouseX, y: mouseY } } : MouseData,\n  ) : ModificationMap<GameState> {\n    if (!player) {\n      return {};\n    }\n\n    const { x, y } = player.mousePosition;\n\n    return {\n      'mousePosition.x': ['+', mouseX - x],\n      'mousePosition.y': ['+', mouseY - y],\n    };\n  }\n\n  protected getScope (extra = '') {\n    return `players.${ this.params.uuid }`;\n  }\n}\n","import { GameEvent, GameEventType, ModificationMap, Vector } from '@kevupton/game-engine';\nimport { GameState } from '../game';\n\ninterface MovementData {\n  uuid : string;\n}\n\nconst SPEED = 200;\n\n/*\n Movement sync to be done once every 500 ms.\n Not as an event.\n */\n\nexport class MovementUpdateEvent extends GameEvent<GameState['players'], MovementData> {\n  public readonly type = GameEventType.Local;\n\n  protected calculateModifications (\n    players : GameState['players'],\n  ) : ModificationMap<GameState> {\n\n    return Object.assign(\n      {},\n      ...Object.keys(players).map(id => this.createChanges(players, id)),\n    );\n  }\n\n  private createChanges (players : GameState['players'], uuid : string) {\n    const player = players[uuid];\n    const { _ } = this;\n\n    const { x, y }                 = player.playerPosition;\n    const { x: mouseX, y: mouseY } = player.mousePosition;\n\n    const diffX = mouseX - x;\n    const diffY = mouseY - y;\n    const total = Math.abs(diffX) + Math.abs(diffY);\n\n    if (total === 0) {\n      return {};\n    }\n\n    const percX = diffX / total;\n    const percY = diffY / total;\n\n    const prevVector = player.vector || {\n      x: 0,\n      y: 0,\n    };\n\n    const vector : Vector = {\n      x: percX * _(SPEED),\n      y: percY * _(SPEED),\n    };\n\n    return {\n      [`${uuid}.playerPosition.x`]: ['+', prevVector.x],\n      [`${uuid}.playerPosition.y`]: ['+', prevVector.y],\n      [`${uuid}.vector.x`]: ['+', vector.x - prevVector.x],\n      [`${uuid}.vector.y`]: ['+', vector.y - prevVector.y],\n    };\n  }\n\n  protected getScope (extra = '') : string {\n    return 'players';\n  }\n}\n","import { GameController, Vector } from '@kevupton/game-engine';\nimport { MousePositionEvent } from '../events/MousePositionEvent';\nimport { MovementUpdateEvent } from '../events/MovementUpdateEvent';\nimport { GameState } from '../game';\n\nexport class MovementController extends GameController<GameState> {\n\n  static readonly INTERVAL = 300;\n\n  private current? : Vector;\n  private previous? : Vector;\n\n  private countdown = 0;\n\n  public init () : void {\n    window.addEventListener('mousemove', ({ clientX, clientY }) => {\n      this.current = {\n        x: clientX,\n        y: clientY,\n      };\n    });\n  }\n\n  public loop (delta : number) : void {\n    this.countdown -= delta;\n\n    this.events.trigger(new MovementUpdateEvent({\n      uuid: this.uuid,\n    }));\n\n    if (this.countdown > 0) {\n      return;\n    }\n\n    this.countdown = MovementController.INTERVAL;\n\n    if (!this.current ||\n      (this.previous &&\n        this.previous.x === this.current.x &&\n        this.previous.y === this.current.y)) {\n\n      return;\n    }\n\n    this.events.trigger(new MousePositionEvent({\n      mousePosition: this.current,\n      uuid: this.uuid,\n    }));\n\n    this.previous = this.current;\n  }\n}\n","import { GameEvent, ModificationMap } from '@kevupton/game-engine';\nimport { GameState } from '../game';\n\ninterface PlayerData {\n  uuid : string;\n  color : string;\n}\n\nexport class PlayerInitEvent extends GameEvent<GameState, PlayerData> {\n  protected calculateModifications (\n    state : GameState,\n    { uuid, color } : PlayerData,\n  ) : ModificationMap<GameState> {\n    return {\n      ['players.' + uuid]: ['=', {\n        playerPosition: { x: 200, y: 200 },\n        mousePosition: { x: 200, y: 200 },\n        vector: { x: 0, y: 0 },\n        color,\n      }],\n    };\n  }\n}\n","import { ViewItem } from '@kevupton/game-engine';\nimport { GameState, ViewState, default as gameManager } from '../game';\n\nexport interface PlayerBallParams {\n  uuid : string;\n}\n\ntype ViewStateScope = ViewState['players']['uuid'] | undefined;\ntype StateScope = GameState['players']['uuid'] | undefined;\n\nexport class PlayerBall extends ViewItem<GameState, ViewState, PlayerBallParams, StateScope, ViewStateScope> {\n\n  public init (gameState : StateScope, viewState : ViewStateScope) {\n  }\n\n  public render (player : ViewStateScope, ctx : CanvasRenderingContext2D) : void {\n    if (!player) {\n      return;\n    }\n\n    const { _ } = this;\n\n    ctx.beginPath();\n    ctx.arc(_(player.x), _(player.y), 20, 0, 2 * Math.PI);\n    ctx.fillStyle = player.color;\n    ctx.fill();\n  }\n\n  public update (\n    player : StateScope,\n    vPlayer : ViewStateScope,\n    delta : number,\n  ) {\n    if (!player || !player.vector) {\n      return;\n    }\n\n    let prevPercentage = 0;\n    if (vPlayer &&\n      vPlayer.prevPlayerPosition.x === player.playerPosition.x &&\n      vPlayer.prevPlayerPosition.y === player.playerPosition.y) {\n      prevPercentage = vPlayer.percentage;\n    }\n\n    const percentage = Math.min(1, (delta / (1000 / gameManager.ticksPerSecond)) + prevPercentage);\n\n    const newX = player.playerPosition.x + percentage * player.vector.x;\n    const newY = player.playerPosition.y + percentage * player.vector.y;\n\n    /*\n      Only rerender if they are in a new position\n     */\n    if (!vPlayer || vPlayer.x !== newX || vPlayer.y !== newY) {\n      return {\n        ...vPlayer,\n        x: newX,\n        y: newY,\n        percentage,\n        color: player.color,\n        // this needs to use a different reference so that it does sync updates\n        prevPlayerPosition: { ...player.playerPosition },\n      };\n    }\n  }\n\n  public getStateScope () : string {\n    return `players.${ this.params.uuid }`;\n  }\n\n  public getViewStateScope () : string {\n    return `players.${ this.params.uuid }`;\n  }\n}\n","import { GameController } from '@kevupton/game-engine';\nimport randomColor from 'randomcolor';\nimport { PlayerInitEvent } from '../events/PlayerInitEvent';\nimport { GameState } from '../game';\nimport { PlayerBall } from '../view/PlayerBall';\n\nexport class PlayerController extends GameController<GameState> {\n\n  public init () : void {\n    Object.keys(this.state.players)\n      .forEach(uuid => this.createPlayerBall(uuid));\n\n    this.events.on$(PlayerInitEvent).subscribe(event => {\n      this.createPlayerBall(event.params.uuid);\n    });\n\n    const color = randomColor();\n\n    this.events.trigger(new PlayerInitEvent({\n      uuid: this.party.uuid,\n      color: color instanceof Array ? color[0] : color,\n    }));\n  }\n\n  public loop (delta : number) : void {\n  }\n\n  private createPlayerBall (uuid : string) {\n    this.view.registerViewItem(new PlayerBall({ uuid }));\n  }\n}\n","import { GameEngine, Vector } from '@kevupton/game-engine';\nimport { MovementController } from './controllers/MovementController';\nimport { PlayerController } from './controllers/PlayerController';\nimport { MousePositionEvent } from './events/MousePositionEvent';\nimport { MovementUpdateEvent } from './events/MovementUpdateEvent';\nimport { PlayerInitEvent } from './events/PlayerInitEvent';\n\nexport interface GameState {\n  canvasWidth : number;\n  canvasHeight : number;\n  players : {\n    [key : string] : {\n      playerPosition : Vector;\n      mousePosition : Vector;\n      vector : Vector;\n      color : string;\n    }\n  }\n}\n\nexport interface ViewState {\n  players : {\n    [key : string] : {\n      x : number;\n      y : number;\n      prevPlayerPosition : Vector;\n      percentage : number;\n      color : string;\n    }\n  }\n}\n\nexport default new GameEngine<GameState, ViewState>({\n  initialViewState: {\n    players: {},\n  },\n  ticksPerSecond: 20,\n  framesPerSecond: 40,\n  initialState: {\n    canvasWidth: 500,\n    canvasHeight: 500,\n    players: {},\n  },\n  controllers: [\n    MovementController,\n    PlayerController,\n  ],\n  events: [\n    MousePositionEvent,\n    PlayerInitEvent,\n    MovementUpdateEvent,\n  ],\n  socketConfig: {\n    host: 'p2p.s1r.io',\n    rtcConfig: {\n      'iceServers': [\n        { 'urls': 'stun:stun.stunprotocol.org:3478' },\n        { 'urls': 'stun:stun.l.google.com:19302' },\n      ],\n    },\n  },\n});\n\n\n","import React from 'react';\nimport { ReactiveXComponent } from 'reactive-x-component';\nimport './App.css';\nimport gameEngine from './game';\n\ngameEngine.start();\n\nexport default ReactiveXComponent()(() => {\n  return (\n    <div className=\"App\"\n         ref={ node => node && node.appendChild(gameEngine.viewElement) }\n    />\n  );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}