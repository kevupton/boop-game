{"version":3,"sources":["events/MousePositionEvent.ts","controllers/MouseController.ts","events/PlayerInitEvent.ts","controllers/PlayerController.ts","game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MousePositionEvent","name","calculateModifications","_ref","_ref2","_ref3","players","posX","posY","uuid","_players$uuid","diffX","x","diffY","y","total","Math","abs","percX","percY","Object","defineProperty","MouseController","_GameController","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","currentX","currentY","countdown","inherits","createClass","key","value","_this2","window","addEventListener","clientX","clientY","delta","undefined","eventManager","triggerLocalEvent","party","subscribe","GameController","PlayerInitEvent","state","color","PlayerController","randomColor","game","GameEngine","socketConfig","host","initialState","canvasWidth","canvasHeight","controllers","events","rtcConfig","iceServers","urls","gameEngine","start","ReactiveXComponent","state$","keys","react_default","a","createElement","className","map","playerId","style","borderRadius","backgroundColor","position","width","height","top","left","transform","transition","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6a095d1.chunk.js","sourcesContent":["import { GameEvent, ModificationMap } from '@kevupton/game-engine';\nimport { GameData } from '../game';\n\ninterface MousePosition {\n  posX : number;\n  posY : number;\n  uuid : string;\n}\n\nconst SPEED = 20;\n\nexport const MousePositionEvent : GameEvent<GameData, MousePosition> = {\n  name: 'mouse-position-event',\n  calculateModifications (\n    { players } : GameData,\n    { posX, posY, uuid },\n  ) : ModificationMap<GameData> {\n    if (!players[uuid]) {\n      return {};\n    }\n\n    const { x, y } = players[uuid];\n\n    const diffX = posX - x;\n    const diffY = posY - y;\n    const total = Math.abs(diffX) + Math.abs(diffY);\n\n    if (total === 0) {\n      return {};\n    }\n\n    const percX = diffX / total;\n    const percY = diffY / total;\n\n    return {\n      ['players.' + uuid + '.x']: ['+', percX * SPEED],\n      ['players.' + uuid + '.y']: ['+', percY * SPEED],\n    };\n  },\n};\n","import { MousePositionEvent } from '../events/MousePositionEvent';\nimport { GameData } from '../game';\nimport { GameController } from '@kevupton/game-engine';\n\nconst INTERVAL = 100;\n\nexport class MouseController extends GameController<GameData> {\n\n  private currentX? : number;\n  private currentY? : number;\n\n  private countdown = 0;\n\n  public init () : void {\n    window.addEventListener('mousemove', ({ clientX, clientY }) => {\n      this.currentX = clientX;\n      this.currentY = clientY;\n    });\n  }\n\n  public loop (delta : number) : void {\n    this.countdown -= delta;\n\n    if (this.countdown > 0) {\n      return;\n    }\n\n    if (this.currentY === undefined || this.currentX === undefined) {\n      return;\n    }\n\n    this.eventManager.triggerLocalEvent(MousePositionEvent.name, {\n      posX: this.currentX,\n      posY: this.currentY,\n      uuid: this.party.uuid,\n    }).subscribe();\n\n    this.countdown += INTERVAL;\n  }\n}\n","import { GameEvent, ModificationMap } from '@kevupton/game-engine';\nimport { GameData } from '../game';\n\ninterface PlayerData {\n  uuid : string;\n  color : string;\n}\n\nexport const PlayerInitEvent : GameEvent<GameData, PlayerData> = {\n  name: 'player-init-event',\n  calculateModifications (\n    state,\n    { uuid, color },\n  ) : ModificationMap<GameData> {\n    return {\n      ['players.' + uuid]: ['=', { x: 200, y: 200, color, }],\n    };\n  },\n};\n\n// TODO create a player leave event\n","import { GameController } from '@kevupton/game-engine';\nimport { PlayerInitEvent } from '../events/PlayerInitEvent';\nimport { GameData } from '../game';\nimport randomColor from 'randomcolor';\n\nexport class PlayerController extends GameController<GameData> {\n\n  public init () : void {\n    this.eventManager.triggerLocalEvent(PlayerInitEvent.name, {\n      uuid: this.party.uuid,\n      color: randomColor(),\n    }).subscribe();\n  }\n\n  public loop (delta : number) : void {\n  }\n}\n","import { GameEngine } from '@kevupton/game-engine';\nimport { MouseController } from './controllers/MouseController';\nimport { PlayerController } from './controllers/PlayerController';\nimport { MousePositionEvent } from './events/MousePositionEvent';\nimport { PlayerInitEvent } from './events/PlayerInitEvent';\n\nexport interface GameData {\n  canvasWidth : number;\n  canvasHeight : number;\n  players : {\n    [key : string] : {\n      x : number;\n      y : number;\n      color : string;\n    }\n  }\n}\n\nexport default new GameEngine<GameData>({\n  socketConfig: {\n    host: 'ec2-13-236-85-45.ap-southeast-2.compute.amazonaws.com',\n  },\n  initialState: {\n    canvasWidth: 500,\n    canvasHeight: 500,\n    players: {},\n  },\n  controllers: [\n    MouseController,\n    PlayerController,\n  ],\n  events: [\n    MousePositionEvent,\n    PlayerInitEvent,\n  ],\n  socketConfig: {\n    rtcConfig: {\n      'iceServers': [\n        {'urls': 'stun:stun.stunprotocol.org:3478'},\n        {'urls': 'stun:stun.l.google.com:19302'},\n      ]\n    }\n  }\n});\n\n\n","import React from 'react';\nimport { ReactiveXComponent } from 'reactive-x-component';\nimport './App.css';\nimport gameEngine  from './game';\n\ngameEngine.start();\n\nexport default ReactiveXComponent({\n  state: gameEngine.state$,\n}, {\n  state: gameEngine.state\n})(({ state }) => {\n  const players = Object.keys(state.players);\n\n  return (\n    <div className=\"App\">\n      { players.map(playerId => (\n        <div key={ playerId } style={ {\n          borderRadius: '50%',\n          backgroundColor: state.players[playerId].color,\n          position: 'absolute',\n          width: 20,\n          height: 20,\n          top: state.players[playerId].y,\n          left: state.players[playerId].x,\n          transform: 'translate(-50%, -50%)',\n          transition: '200ms',\n        } }/>\n      )) }\n    </div>\n  );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}